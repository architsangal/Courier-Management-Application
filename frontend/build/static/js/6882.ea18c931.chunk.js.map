{"version":3,"file":"static/js/6882.ea18c931.chunk.js","mappings":"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","sources":["views/buttons/buttons/Buttons.js","../node_modules/@coreui/icons/src/free/cil-bell.ts"],"sourcesContent":["import React from 'react'\nimport { CButton, CCard, CCardBody, CCardHeader, CCol, CRow } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilBell } from '@coreui/icons'\nimport { DocsExample } from 'src/components'\n\nconst Buttons = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              CoreUI includes a bunch of predefined buttons components, each serving its own\n              semantic purpose. Buttons show what action will happen when the user clicks or touches\n              it. CoreUI buttons are used to initialize operations, both in the background or\n              foreground of an experience.\n            </p>\n            <DocsExample href=\"components/buttons\">\n              {['normal', 'active', 'disabled'].map((state, index) => (\n                <CRow className=\"align-items-center mb-3\" key={index}>\n                  <CCol xs={12} xl={2} className=\"mb-3 mb-xl-0\">\n                    {state.charAt(0).toUpperCase() + state.slice(1)}\n                  </CCol>\n                  <CCol xs>\n                    {[\n                      'primary',\n                      'secondary',\n                      'success',\n                      'danger',\n                      'warning',\n                      'info',\n                      'light',\n                      'dark',\n                    ].map((color, index) => (\n                      <CButton\n                        color={color}\n                        key={index}\n                        active={state === 'active'}\n                        disabled={state === 'disabled'}\n                      >\n                        {color.charAt(0).toUpperCase() + color.slice(1)}\n                      </CButton>\n                    ))}\n                    <CButton color=\"link\">Link</CButton>\n                  </CCol>\n                </CRow>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>with icons</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              You can combine button with our <a href=\"https://icons.coreui.io/\">CoreUI Icons</a>.\n            </p>\n            <DocsExample href=\"components/buttons\">\n              {['normal', 'active', 'disabled'].map((state, index) => (\n                <CRow className=\"align-items-center mb-3\" key={index}>\n                  <CCol xs={12} xl={2} className=\"mb-3 mb-xl-0\">\n                    {state.charAt(0).toUpperCase() + state.slice(1)}\n                  </CCol>\n                  <CCol xs>\n                    {[\n                      'primary',\n                      'secondary',\n                      'success',\n                      'danger',\n                      'warning',\n                      'info',\n                      'light',\n                      'dark',\n                    ].map((color, index) => (\n                      <CButton\n                        color={color}\n                        key={index}\n                        active={state === 'active'}\n                        disabled={state === 'disabled'}\n                      >\n                        <CIcon icon={cilBell} className=\"me-2\" />\n                        {color.charAt(0).toUpperCase() + color.slice(1)}\n                      </CButton>\n                    ))}\n                    <CButton color=\"link\">\n                      <CIcon icon={cilBell} className=\"me-2\" />\n                      Link\n                    </CButton>\n                  </CCol>\n                </CRow>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Button components</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              The <code>&lt;CButton&gt;</code> component are designed for{' '}\n              <code>&lt;button&gt;</code> , <code>&lt;a&gt;</code> or <code>&lt;input&gt;</code>{' '}\n              elements (though some browsers may apply a slightly different rendering).\n            </p>\n            <p className=\"text-medium-emphasis small\">\n              If you&#39;re using <code>&lt;CButton&gt;</code> component as <code>&lt;a&gt;</code>{' '}\n              elements that are used to trigger functionality ex. collapsing content, these links\n              should be given a <code>role=&#34;button&#34;</code> to adequately communicate their\n              meaning to assistive technologies such as screen readers.\n            </p>\n            <DocsExample href=\"components/buttons#button-components\">\n              <CButton component=\"a\" color=\"primary\" href=\"#\" role=\"button\">\n                Link\n              </CButton>\n              <CButton type=\"submit\" color=\"primary\">\n                Button\n              </CButton>\n              <CButton component=\"input\" type=\"button\" color=\"primary\" value=\"Input\" />\n              <CButton component=\"input\" type=\"submit\" color=\"primary\" value=\"Submit\" />\n              <CButton component=\"input\" type=\"reset\" color=\"primary\" value=\"Reset\" />\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>outline</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              If you need a button, but without the strong background colors. Set{' '}\n              <code>variant=&#34;outline&#34;</code> prop to remove all background colors.\n            </p>\n            <DocsExample href=\"components/buttons#outline-buttons\">\n              {['normal', 'active', 'disabled'].map((state, index) => (\n                <CRow className=\"align-items-center mb-3\" key={index}>\n                  <CCol xs={12} xl={2} className=\"mb-3 mb-xl-0\">\n                    {state.charAt(0).toUpperCase() + state.slice(1)}\n                  </CCol>\n                  <CCol xs>\n                    {[\n                      'primary',\n                      'secondary',\n                      'success',\n                      'danger',\n                      'warning',\n                      'info',\n                      'light',\n                      'dark',\n                    ].map((color, index) => (\n                      <CButton\n                        color={color}\n                        variant=\"outline\"\n                        key={index}\n                        active={state === 'active'}\n                        disabled={state === 'disabled'}\n                      >\n                        {color.charAt(0).toUpperCase() + color.slice(1)}\n                      </CButton>\n                    ))}\n                  </CCol>\n                </CRow>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>ghost</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              If you need a ghost variant of button, set <code>variant=&#34;ghost&#34;</code> prop\n              to remove all background colors.\n            </p>\n            <DocsExample href=\"components/buttons#ghost-buttons\">\n              {['normal', 'active', 'disabled'].map((state, index) => (\n                <CRow className=\"align-items-center mb-3\" key={index}>\n                  <CCol xs={12} xl={2} className=\"mb-3 mb-xl-0\">\n                    {state.charAt(0).toUpperCase() + state.slice(1)}\n                  </CCol>\n                  <CCol xs>\n                    {[\n                      'primary',\n                      'secondary',\n                      'success',\n                      'danger',\n                      'warning',\n                      'info',\n                      'light',\n                      'dark',\n                    ].map((color, index) => (\n                      <CButton\n                        color={color}\n                        variant=\"ghost\"\n                        key={index}\n                        active={state === 'active'}\n                        disabled={state === 'disabled'}\n                      >\n                        {color.charAt(0).toUpperCase() + color.slice(1)}\n                      </CButton>\n                    ))}\n                  </CCol>\n                </CRow>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Sizes</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Larger or smaller buttons? Add <code>size=&#34;lg&#34;</code> or{' '}\n              <code>size=&#34;sm&#34;</code> for additional sizes.\n            </p>\n            <DocsExample href=\"components/buttons#sizes\">\n              <CButton color=\"primary\" size=\"lg\">\n                Large button\n              </CButton>\n              <CButton color=\"secondary\" size=\"lg\">\n                Large button\n              </CButton>\n            </DocsExample>\n            <DocsExample href=\"components/buttons#sizes\">\n              <CButton color=\"primary\" size=\"sm\">\n                Small button\n              </CButton>\n              <CButton color=\"secondary\" size=\"sm\">\n                Small button\n              </CButton>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Pill</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"components/buttons#pill-buttons\">\n              {[\n                'primary',\n                'secondary',\n                'success',\n                'danger',\n                'warning',\n                'info',\n                'light',\n                'dark',\n              ].map((color, index) => (\n                <CButton color={color} shape=\"rounded-pill\" key={index}>\n                  {color.charAt(0).toUpperCase() + color.slice(1)}\n                </CButton>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Square</small>\n          </CCardHeader>\n          <CCardBody>\n            <DocsExample href=\"components/buttons#square\">\n              {[\n                'primary',\n                'secondary',\n                'success',\n                'danger',\n                'warning',\n                'info',\n                'light',\n                'dark',\n              ].map((color, index) => (\n                <CButton color={color} shape=\"rounded-0\" key={index}>\n                  {color.charAt(0).toUpperCase() + color.slice(1)}\n                </CButton>\n              ))}\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Disabled state</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add the <code>disabled</code> boolean prop to any <code>&lt;CButton&gt;</code>{' '}\n              component to make buttons look inactive. Disabled button has{' '}\n              <code>pointer-events: none</code> applied to, disabling hover and active states from\n              triggering.\n            </p>\n            <DocsExample href=\"components/buttons#disabled-state\">\n              <CButton color=\"primary\" size=\"lg\" disabled>\n                Primary button\n              </CButton>\n              <CButton color=\"secondary\" size=\"lg\" disabled>\n                Button\n              </CButton>\n            </DocsExample>\n            <p className=\"text-medium-emphasis small\">\n              Disabled buttons using the <code>&lt;a&gt;</code> component act a little different:\n            </p>\n            <p className=\"text-medium-emphasis small\">\n              <code>&lt;a&gt;</code>s don&#39;tsupport the <code>disabled</code> attribute, so\n              CoreUI has to add <code>.disabled</code> className to make buttons look inactive.\n              CoreUI also has to add to the disabled button component{' '}\n              <code>aria-disabled=&#34;true&#34;</code> attribute to show the state of the component\n              to assistive technologies.\n            </p>\n            <DocsExample href=\"components/buttons#disabled-state\">\n              <CButton component=\"a\" href=\"#\" color=\"primary\" size=\"lg\" disabled>\n                Primary link\n              </CButton>\n              <CButton component=\"a\" href=\"#\" color=\"secondary\" size=\"lg\" disabled>\n                Link\n              </CButton>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Button</strong> <small>Block buttons</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Create buttons that span the full width of a parent—by using utilities.\n            </p>\n            <DocsExample href=\"components/buttons#block-buttons\">\n              <div className=\"d-grid gap-2\">\n                <CButton color=\"primary\">Button</CButton>\n                <CButton color=\"primary\">Button</CButton>\n              </div>\n            </DocsExample>\n            <p className=\"text-medium-emphasis small\">\n              Here we create a responsive variation, starting with vertically stacked buttons until\n              the <code>md</code> breakpoint, where <code>.d-md-block</code> replaces the{' '}\n              <code>.d-grid</code> class, thus nullifying the <code>gap-2</code> utility. Resize\n              your browser to see them change.\n            </p>\n            <DocsExample href=\"components/buttons#block-buttons\">\n              <div className=\"d-grid gap-2 d-md-block\">\n                <CButton color=\"primary\">Button</CButton>\n                <CButton color=\"primary\">Button</CButton>\n              </div>\n            </DocsExample>\n            <p className=\"text-medium-emphasis small\">\n              You can adjust the width of your block buttons with grid column width classes. For\n              example, for a half-width &#34;block button&#34;, use <code>.col-6</code>. Center it\n              horizontally with <code>.mx-auto</code>, too.\n            </p>\n            <DocsExample href=\"components/buttons#block-buttons\">\n              <div className=\"d-grid gap-2 col-6 mx-auto\">\n                <CButton color=\"primary\">Button</CButton>\n                <CButton color=\"primary\">Button</CButton>\n              </div>\n            </DocsExample>\n            <p className=\"text-medium-emphasis small\">\n              Additional utilities can be used to adjust the alignment of buttons when horizontal.\n              Here we&#39;ve taken our previous responsive example and added some flex utilities and\n              a margin utility on the button to right align the buttons when they&#39;re no longer\n              stacked.\n            </p>\n            <DocsExample href=\"components/buttons#block-buttons\">\n              <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                <CButton color=\"primary\" className=\"me-md-2\">\n                  Button\n                </CButton>\n                <CButton color=\"primary\">Button</CButton>\n              </div>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Buttons\n","export var cilBell = [\"512 512\", \"<path fill='var(--ci-primary-color, currentColor)' d='M450.27,348.569,406.6,267.945V184c0-83.813-68.187-152-152-152s-152,68.187-152,152v83.945L58.928,348.568A24,24,0,0,0,80.031,384h86.935c-.238,2.636-.367,5.3-.367,8a88,88,0,0,0,176,0c0-2.7-.129-5.364-.367-8h86.935a24,24,0,0,0,21.1-35.431ZM310.6,392a56,56,0,1,1-111.419-8H310.018A56.14,56.14,0,0,1,310.6,392ZM93.462,352,134.6,276.055V184a120,120,0,0,1,240,0v92.055L415.736,352Z' class='ci-primary'/>\"];\n"],"names":["_jsxs","CRow","children","_jsx","CCol","xs","CCard","className","CCardHeader","CCardBody","DocsExample","href","map","state","index","xl","charAt","toUpperCase","slice","color","CButton","active","disabled","CIcon","icon","cilBell","component","role","type","value","variant","size","shape"],"sourceRoot":""}